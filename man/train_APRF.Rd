% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_APRF.R
\name{train_APRF}
\alias{train_APRF}
\title{Train Longitudinal Random Forest Models for Asset Pricing}
\usage{
train_APRF(
  model = c("mert", "smert", "merf", "smerf", "rf", "reemt", "sreemt"),
  train_X,
  train_Y,
  train_time,
  train_id,
  n_iter = 100,
  n_trees = 500,
  mtry = NULL,
  n_cores = 1,
  sto = "none",
  del = 0.001
)
}
\arguments{
\item{model}{Character string specifying the model type. Must be one of:
\itemize{
  \item "mert": Mixed Effects Random Tree
  \item "smert": Stochastic Mixed Effects Random Tree
  \item "merf": Mixed Effects Random Forest
  \item "smerf": Stochastic Mixed Effects Random Forest
  \item "rf": Standard Random Forest
  \item "reemt": Random Effects EM Tree
  \item "sreemt": Stochastic Random Effects EM Tree
}}

\item{train_X}{A data.frame containing the fixed effects predictors.}

\item{train_Y}{Numeric vector containing the response variable.}

\item{train_time}{Numeric vector containing the time measurements associated with each observation.}

\item{train_id}{Vector containing the identifiers for different trajectories/entities.}

\item{n_iter}{Integer specifying the maximum number of iterations for model fitting. Default is 100.}

\item{n_trees}{Integer specifying the number of trees to grow (for forest-based models). Default is 500.}

\item{mtry}{Integer specifying the number of variables randomly sampled at each split. Default is ceiling(ncol(train_X) / 3).}

\item{n_cores}{Integer specifying the number of cores to use for parallel processing. Default is 1.}

\item{sto}{Character string specifying the stochastic process type (for stochastic variants). Must be one of:
\itemize{
  \item "none": No stochastic process (default)
  \item "BM": Brownian motion
}}

\item{del}{Numeric value specifying the convergence threshold. The algorithm stops when the relative
difference in log-likelihood between iterations is smaller than this value. Default is 0.001.}
}
\value{
For model="rf", returns a ranger object (see \link[ranger]{ranger} for details).
For all other models, returns a fitted model object of class "APRF" containing:
  \itemize{
    \item forest: The fitted random forest (ranger object) or tree (rpart object) depending on model type
    \item random_effects: Predictions of random effects for different trajectories
    \item var_random_effects: Estimated variance-covariance matrix of random effects
    \item sigma: Estimated residual variance parameter
    \item id_btilde: Identifiers associated with random effects predictions
    \item omega: (For stochastic variants) Predicted stochastic processes
    \item sigma_sto: (For stochastic variants) Estimated volatility parameter
    \item time: Time measurements vector
    \item sto: Stochastic process specification
    \item Vraisemblance: Log-likelihood values across iterations
    \item id: Vector of trajectory identifiers
    \item OOB: Out-of-bag error estimates (for forest-based models)
  }
See \link[ranger]{ranger} and \link[rpart]{rpart} for details about the underlying forest/tree objects.
}
\description{
Train Longitudinal Random Forest Models for Asset Pricing
}
\examples{
\dontrun{
# Train a MERF model
model <- train_APRF(
  model = "merf",
  train_X = as.matrix(train_data[, char_names]),
  train_Y = train_data$xret,
  train_time = as.numeric(as.factor(train_data$date)),
  train_id = train_data$gvkey,
  n_iter = 100,
  n_trees = 500
)

# Train a stochastic variant with Brownian motion
model_sto <- train_APRF(
  model = "smerf",
  train_X = as.matrix(train_data[, char_names]),
  train_Y = train_data$xret,
  train_time = as.numeric(as.factor(train_data$date)),
  train_id = train_data$gvkey,
  sto = "BM"
)
}

}
